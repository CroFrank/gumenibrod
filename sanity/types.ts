/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  brand?: "kolibri" | "gala" | "galaxy" | "adventure";
  category?: "motorni-gumeni-brod" | "veslacki-gumeni-brod" | "dodaci";
  featured?: Array<string>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Product | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: ALL_PRODUCTS_QUERY
// Query: *[_type == "product"]
export type ALL_PRODUCTS_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  price?: number;
  brand?: "adventure" | "gala" | "galaxy" | "kolibri";
  category?: "dodaci" | "motorni-gumeni-brod" | "veslacki-gumeni-brod";
  featured?: Array<string>;
}>;
// Variable: FEATURED_PRODUCTS_QUERY
// Query: *[_type == "product" && defined(featured) && count(featured) > 0]{  _id,  title,  price,  description,  "slug": slug.current,  brand,  category,  featured,  images[]{    asset->{      _id,      url,      metadata { lqip, dimensions }    },    alt  }}
export type FEATURED_PRODUCTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  price: number | null;
  description: string | null;
  slug: string | null;
  brand: "adventure" | "gala" | "galaxy" | "kolibri" | null;
  category: "dodaci" | "motorni-gumeni-brod" | "veslacki-gumeni-brod" | null;
  featured: Array<string> | null;
  images: Array<{
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        lqip: string | null;
        dimensions: SanityImageDimensions | null;
      } | null;
    } | null;
    alt: null;
  }> | null;
}>;
// Variable: PRODUCT_QUERY
// Query: *[_type == "product" && slug.current == $slug][0]{  _id,  title,  price,  description,  brand,  category,  featured,  images[]{    asset->{      _id,      url,      metadata { lqip, dimensions }    },    alt  },  "slug": slug.current}
export type PRODUCT_QUERYResult = {
  _id: string;
  title: string | null;
  price: number | null;
  description: string | null;
  brand: "adventure" | "gala" | "galaxy" | "kolibri" | null;
  category: "dodaci" | "motorni-gumeni-brod" | "veslacki-gumeni-brod" | null;
  featured: Array<string> | null;
  images: Array<{
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        lqip: string | null;
        dimensions: SanityImageDimensions | null;
      } | null;
    } | null;
    alt: null;
  }> | null;
  slug: string | null;
} | null;
// Variable: PRODUCTS_BY_BRAND_QUERY
// Query: *[_type == "product" && (!defined($brands) || brand == $brands)]    | order(_createdAt desc) {       _id,  title,  price,  description,  "slug": slug.current,  brand,  category,  featured,  images[]{    asset->{      _id,      url,      metadata { lqip, dimensions }    },    alt  }}
export type PRODUCTS_BY_BRAND_QUERYResult = Array<{
  _id: string;
  title: string | null;
  price: number | null;
  description: string | null;
  slug: string | null;
  brand: "adventure" | "gala" | "galaxy" | "kolibri" | null;
  category: "dodaci" | "motorni-gumeni-brod" | "veslacki-gumeni-brod" | null;
  featured: Array<string> | null;
  images: Array<{
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        lqip: string | null;
        dimensions: SanityImageDimensions | null;
      } | null;
    } | null;
    alt: null;
  }> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"product\"]": ALL_PRODUCTS_QUERYResult;
    "*[_type == \"product\" && defined(featured) && count(featured) > 0]{\n  _id,\n  title,\n  price,\n  description,\n  \"slug\": slug.current,\n  brand,\n  category,\n  featured,\n  images[]{\n    asset->{\n      _id,\n      url,\n      metadata { lqip, dimensions }\n    },\n    alt\n  }\n}": FEATURED_PRODUCTS_QUERYResult;
    "*[_type == \"product\" && slug.current == $slug][0]{\n  _id,\n  title,\n  price,\n  description,\n  brand,\n  category,\n  featured,\n  images[]{\n    asset->{\n      _id,\n      url,\n      metadata { lqip, dimensions }\n    },\n    alt\n  },\n  \"slug\": slug.current\n}": PRODUCT_QUERYResult;
    "  \n  *[_type == \"product\" && (!defined($brands) || brand == $brands)]  \n  | order(_createdAt desc) {  \n     _id,\n  title,\n  price,\n  description,\n  \"slug\": slug.current,\n  brand,\n  category,\n  featured,\n  images[]{\n    asset->{\n      _id,\n      url,\n      metadata { lqip, dimensions }\n    },\n    alt\n  }\n}\n": PRODUCTS_BY_BRAND_QUERYResult;
  }
}
